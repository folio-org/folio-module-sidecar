# quarkus logging configuration
quarkus.log.level=${ROOT_LOG_LEVEL:INFO}
quarkus.log.category."org.folio.sidecar".level=${SC_LOG_LEVEL:INFO}

quarkus.http.record-request-start-time=true

quarkus.log.category."transaction".use-parent-handlers=false
quarkus.log.category."transaction".level=INFO
quarkus.log.category."transaction".handlers=TRANSACTION_HANDLER

quarkus.log.handler.console."TRANSACTION_HANDLER".enable = true
quarkus.log.handler.file."TRANSACTION_HANDLER".enable=false
default.access.log.format=%X{remote-ip} - %X{remote-host} - %X{remote-user} [%d{dd/MM/yyyy:HH:mm:ss z}] "%X{method} %X{path} %X{protocol}" %X{status} %X{bytes} rt=%X{rt}  uct="%X{uct}"  uht="%X{uht}"  urt="%X{urt}"  "%X{user-agent}" "%X{x-okapi-tenant}" "%X{x-okapi-user-id}" "%X{x-okapi-request-id}" %n
quarkus.log.handler.console."TRANSACTION_HANDLER".format=${SC_ACCESS_LOG_FORMAT:${default.access.log.format}}
#quarkus.log.handler.file."TRANSACTION_HANDLER".path=transaction-access.log

quarkus.log.category."org.folio.sidecar.configuration.WebClientConfiguration".level=DEBUG

# quarkus configuration
quarkus.application.name=folio-module-sidecar
quarkus.http.port=8081
quarkus.http.ssl-port=8443
quarkus.jackson.fail-on-unknown-properties=false
quarkus.jackson.serialization-inclusion=non_null
quarkus.smallrye-health.root-path=/admin/health
quarkus.kafka.health.enabled=true
quarkus.security.security-providers=SunRsaSign,SunJCE
%fips.quarkus.http.ssl.certificate.key-store-file=${SC_TLS_KEYSTORE_PATH}
%fips.quarkus.http.ssl.certificate.key-store-password=${SC_TLS_KEYSTORE_PASSWORD}
%fips.quarkus.http.ssl.certificate.key-store-password-key=${SC_TLS_KEYSTORE_KEY_PASSWORD}
%fips.quarkus.http.ssl.certificate.key-store-file-type=${SC_TLS_KEY_STORE_FILE_TYPE}
%fips.quarkus.http.ssl.certificate.key-store-provider=${SC_TLS_KEY_STORE_PROVIDER}
#quarkus.log.category."org.bouncycastle.jsse".min-level=TRACE
#quarkus.log.category."org.bouncycastle.jsse".level=TRACE
#quarkus.log.category."org.bouncycastle.jcajce".min-level=TRACE
#quarkus.log.category."org.bouncycastle.jcajce".level=TRACE
# Logging
# quarkus.log.category."org.apache.kafka.clients".level=INFO
# Application manager configuration
am.url=${AM_CLIENT_URL:http://mgr-applications:8081}
# Tenant entitlement configuration
te.url=${TE_CLIENT_URL:http://mgr-tenant-entitlements:8081}
te.batchSize=${TE_CLIENT_BATCH_SIZE:500}
# Tenant manager configuration
tm.url=${TM_CLIENT_URL:http://mgr-tenants:8081}
tm.batchSize=${TM_BATCH_SIZE:50}
# sidecar's module configuration
module.name=${MODULE_NAME}
module.version=${MODULE_VERSION}
module.id=${module.name}-${module.version}
module.url=${MODULE_URL:http://localhost:8081}
module.health-path=${MODULE_HEALTH_PATH:/admin/health}
# sidecar configuration
sidecar.name=${SIDECAR_NAME:sc-${module.name}}
sidecar.url=${SIDECAR_URL}
sidecar.module-path-prefix.enabled=${SIDECAR_MODULE_PATH_PREFIX_ENABLED:false}
sidecar.module-path-prefix.strategy=${SIDECAR_MODULE_PATH_PREFIX_STRATEGY:NONE}
sidecar.cross-tenant.enabled=${ALLOW_CROSS_TENANT_REQUESTS:false}
# keycloak configuration
keycloak.url=${KC_URL:http://keycloak:8080}
keycloak.uri-validation.enabled=${KC_URI_VALIDATION_ENABLED:true}
keycloak.jwt-cache.jwks-refresh-interval=${KC_JWKS_REFRESH_INTERVAL:60}
keycloak.jwt-cache.forced-jwks-refresh-interval=${KC_FORCED_JWKS_REFRESH_INTERVAL:60}
keycloak.login.client-suffix=${KC_LOGIN_CLIENT_SUFFIX:-login-application}
keycloak.admin.client-id=${KC_ADMIN_CLIENT_ID:folio-backend-admin-client}
keycloak.service.client-id=${KC_SERVICE_CLIENT_ID:sidecar-module-access-client}
keycloak.impersonation.client-id=${SIDECAR_IMPERSONATION_CLIENT_NAME:impersonation-client}
keycloak.authorization-cache-max-size=${KC_AUTHORIZATION_CACHE_MAX_SIZE:250}
keycloak.authorization-cache-ttl-offset=${KC_AUTHORIZATION_CACHE_TTL_OFFSET:500}
keycloak.introspection.token-cache-max-size=${KC_INTROSPECTION_TOKEN_CACHE_MAX_SIZE:250}
keycloak.introspection.inactive-token-ttl-in-sec=${KC_INTROSPECTION_INACTIVE_TOKEN_TTL_IN_SEC:3000}
# mod-users configuration
mod-users-keycloak.url=${MOD_USERS_KEYCLOAK_URL:http://mod-users-keycloak:8081}
mod-users-keycloak.cache-expiration-seconds=${MOD_USERS_KEYCLOAK_CACHE_EXPIRATION_SECONDS:300}
mod-users-keycloak.cache-initial-capacity=${MOD_USERS_KEYCLOAK_CACHE_INITIAL_CAPACITY:50}
mod-users-keycloak.cache-max-capacity=${MOD_USERS_KEYCLOAK_CACHE_MAX_CAPACITY:1000}
# retry configuration
retry.attempts=${RETRY_ATTEMPTS:10}
retry.min-delay=${RETRY_MIN_DELAY:5s}
retry.max-delay=${RETRY_MAX_DELAY:2m}
retry.back-off-factor=${RETRY_BACKOFF_FACTOR:2}
# Token caches configuration
token-cache.capacity.initial=${TOKEN_CACHE_INITIAL_CAPACITY:10}
token-cache.capacity.max=${TOKEN_CACHE_MAX_CAPACITY:50}
token-cache.refresh-before-expiry-sec=${TOKEN_CACHE_REFRESH_PRIOR_EXPIRATION:25}
# secret store configuration
secret-store.type=${SECRET_STORE_TYPE:}
# AWS secret store configuration
secret-store.aws-ssm.region=${SECRET_STORE_AWS_SSM_REGION:}
secret-store.aws-ssm.use-iam=${SECRET_STORE_AWS_SSM_USE_IAM:true}
secret-store.aws-ssm.ecs-credentials-endpoint=${SECRET_STORE_AWS_SSM_ECS_CREDENTIALS_ENDPOINT:}
secret-store.aws-ssm.ecs-credentials-path=${SECRET_STORE_AWS_SSM_ECS_CREDENTIALS_PATH:}
secret-store.aws-ssm.fips-enabled=${SECRET_STORE_AWS_SSM_FIPS_ENABLED:false}
secret-store.aws-ssm.trust-store-path=${SECRET_STORE_AWS_SSM_TRUSTSTORE_PATH:}
secret-store.aws-ssm.trust-store-password=${SECRET_STORE_AWS_SSM_TRUSTSTORE_PASSWORD:}
secret-store.aws-ssm.trust-store-file-type=${SECRET_STORE_AWS_SSM_TRUSTSTORE_FILE_TYPE:}
# Vault secret store configuration
secret-store.vault.token=${SECRET_STORE_VAULT_TOKEN:}
secret-store.vault.address=${SECRET_STORE_VAULT_ADDRESS:}
secret-store.vault.enable-ssl=${SECRET_STORE_VAULT_ENABLE_SSL:false}
secret-store.vault.pem-file-path=${SECRET_STORE_VAULT_PEM_FILE_PATH:}
secret-store.vault.keystore-password=${SECRET_STORE_VAULT_KEYSTORE_PASSWORD:}
secret-store.vault.keystore-file-path=${SECRET_STORE_VAULT_KEYSTORE_FILE_PATH:}
secret-store.vault.truststore-file-path=${SECRET_STORE_VAULT_TRUSTSTORE_FILE_PATH:}
%dev.quarkus.log.category."io.smallrye.faulttolerance".level=DEBUG
# Kafka configuration
#quarkus.kafka.devservices.enabled=false
%prod.kafka.bootstrap.servers=${KAFKA_HOST:kafka}:${KAFKA_PORT:9092}
%dev.kafka.bootstrap.servers=${KAFKA_HOST:kafka}:${KAFKA_PORT:9092}
kafka.group.id=${sidecar.name}_${quarkus.uuid}
mp.messaging.incoming.discovery.connector=smallrye-kafka
mp.messaging.incoming.discovery.topic=${ENV:folio}.discovery
mp.messaging.incoming.discovery.security.protocol=${DISCOVERY_SECURITY_PROTOCOL:PLAINTEXT}
mp.messaging.incoming.discovery.ssl.key-password=${DISCOVERY_TLS_KEY_PASSWORD}
mp.messaging.incoming.discovery.ssl.keystore.location=${DISCOVERY_TLS_KEYSTORE_PATH}
mp.messaging.incoming.discovery.ssl.keystore.password=${DISCOVERY_TLS_KEYSTORE_PASSWORD}
mp.messaging.incoming.discovery.ssl.truststore.location=${DISCOVERY_TLS_TRUSTSTORE_PATH}
mp.messaging.incoming.discovery.ssl.truststore.password=${DISCOVERY_TLS_TRUSTSTORE_PASSWORD}
mp.messaging.incoming.discovery.ssl.truststore.certificates=${DISCOVERY_TLS_TRUSTSTORE_CERTIFICATES}
mp.messaging.incoming.discovery.ssl.truststore.type=${DISCOVERY_TLS_TRUSTSTORE_TYPE}
mp.messaging.incoming.entitlement.connector=smallrye-kafka
mp.messaging.incoming.entitlement.topic=${ENV:folio}.entitlement
mp.messaging.incoming.entitlement.security.protocol=${ENTITLEMENT_SECURITY_PROTOCOL:PLAINTEXT}
mp.messaging.incoming.entitlement.ssl.key-password=${ENTITLEMENT_TLS_KEY_PASSWORD}
mp.messaging.incoming.entitlement.ssl.keystore.location=${ENTITLEMENT_TLS_KEYSTORE_PATH}
mp.messaging.incoming.entitlement.ssl.keystore.password=${ENTITLEMENT_TLS_KEYSTORE_PASSWORD}
mp.messaging.incoming.entitlement.ssl.truststore.location=${ENTITLEMENT_TLS_TRUSTSTORE_PATH}
mp.messaging.incoming.entitlement.ssl.truststore.password=${ENTITLEMENT_TLS_TRUSTSTORE_PASSWORD}
mp.messaging.incoming.entitlement.ssl.truststore.certificates=${ENTITLEMENT_TLS_TRUSTSTORE_CERTIFICATES}
mp.messaging.incoming.entitlement.ssl.truststore.type=${ENTITLEMENT_TLS_TRUSTSTORE_TYPE}
# logout topic configuration
mp.messaging.incoming.logout.connector=smallrye-kafka
mp.messaging.incoming.logout.topic=(${ENV:folio}\.)(.*\.)mod-login-keycloak.logout
mp.messaging.incoming.logout.pattern=true
mp.messaging.incoming.logout.security.protocol=${LOGOUT_SECURITY_PROTOCOL:PLAINTEXT}
mp.messaging.incoming.logout.ssl.key-password=${LOGOUT_TLS_KEY_PASSWORD}
mp.messaging.incoming.logout.ssl.keystore.location=${LOGOUT_TLS_KEYSTORE_PATH}
mp.messaging.incoming.logout.ssl.keystore.password=${LOGOUT_TLS_KEYSTORE_PASSWORD}
mp.messaging.incoming.logout.ssl.truststore.location=${LOGOUT_TLS_TRUSTSTORE_PATH}
mp.messaging.incoming.logout.ssl.truststore.password=${LOGOUT_TLS_TRUSTSTORE_PASSWORD}
mp.messaging.incoming.logout.ssl.truststore.certificates=${LOGOUT_TLS_TRUSTSTORE_CERTIFICATES}
mp.messaging.incoming.logout.ssl.truststore.type=${LOGOUT_TLS_TRUSTSTORE_TYPE}

http.request.timeout=${REQUEST_TIMEOUT:60000}
# ###################################
# Web Client configurations
# ###################################
## 1. Ingress client
web-client.ingress.name=ingress-client
web-client.ingress.pool.max-size=500
web-client.ingress.pool.cleaner-period=5000
# other possible settings (same for other clients but need to replace ingress with egress, keycloak, etc.)
#web-client.ingress.pool.max-size-http2=
#web-client.ingress.pool.event-loop-size=
#web-client.ingress.pool.max-wait-queue-size=
#web-client.ingress.timeout.keep-alive=
#web-client.ingress.timeout.idle=
#web-client.ingress.timeout.read-idle=
#web-client.ingress.timeout.write-idle=
#web-client.ingress.timeout.connect=
#web-client.ingress.decompression-supported=
## 2. Egress client
web-client.egress.name=egress-client
web-client.egress.pool.max-size=1000
web-client.egress.pool.cleaner-period=5000
%fips.web-client.egress.tls.enabled=${SC_CLIENT_TLS_ENABLED:false}
%fips.web-client.egress.tls.verify-hostname=${WEB_CLIENT_TLS_VERIFY_HOSTNAME:false}
%fips.web-client.egress.tls.trust-store-path=${SC_CLIENT_TLS_TRUSTSTORE_PATH: }
%fips.web-client.egress.tls.trust-store-password=${SC_CLIENT_TLS_TRUSTSTORE_PASSWORD: }
%fips.web-client.egress.tls.trust-store-file-type=${SC_CLIENT_TLS_TRUSTSTORE_FILE_TYPE: }
%fips.web-client.egress.tls.trust-store-provider=${SC_CLIENT_TLS_TRUSTSTORE_PROVIDER: }
## 3. Keycloak client
web-client.keycloak.name=keycloak-client
web-client.keycloak.pool.max-size=50
%fips.web-client.keycloak.tls.enabled=${KC_CLIENT_TLS_ENABLED:false}
%fips.web-client.keycloak.tls.verify-hostname=${WEB_CLIENT_TLS_VERIFY_HOSTNAME:false}
%fips.web-client.keycloak.tls.trust-store-path=${KC_CLIENT_TLS_TRUSTSTORE_PATH: }
%fips.web-client.keycloak.tls.trust-store-password=${KC_CLIENT_TLS_TRUSTSTORE_PASSWORD: }
%fips.web-client.keycloak.tls.trust-store-file-type=${KC_CLIENT_TLS_TRUSTSTORE_FILE_TYPE: }
%fips.web-client.keycloak.tls.trust-store-provider=${KC_CLIENT_TLS_TRUSTSTORE_PROVIDER: }
## 4. Gateway client
web-client.gateway.name=gateway-client
web-client.gateway.pool.max-size=200
%fips.web-client.gateway.tls.enabled=${GW_CLIENT_TLS_ENABLED:false}
%fips.web-client.gateway.tls.verify-hostname=${WEB_CLIENT_TLS_VERIFY_HOSTNAME:true}
%fips.web-client.gateway.tls.trust-store-path=${GW_CLIENT_TLS_TRUSTSTORE_PATH: }
%fips.web-client.gateway.tls.trust-store-password=${GW_CLIENT_TLS_TRUSTSTORE_PASSWORD: }
%fips.web-client.gateway.tls.trust-store-file-type=${GW_CLIENT_TLS_TRUSTSTORE_FILE_TYPE: }
%fips.web-client.gateway.tls.trust-store-provider=${GW_CLIENT_TLS_TRUSTSTORE_PROVIDER: }

# Cache settings for user / client credentials
credentials.client.cache.initial-capacity=5
credentials.client.cache.max-size=15
credentials.user.cache.initial-capacity=1
credentials.user.cache.max-size=5

# ###################################
# Routing configurations
# ###################################
# Request tracing configurations
routing.tracing.enabled=false
# tracing potentially can be limited to specific paths
#routing.tracing.paths[0]=permissions/users

# enable/disable io.vertx.ext.web.handler.LoggerHandler
routing.logger.enabled=false
# enable/disable io.vertx.ext.web.handler.ResponseTimeHandler
routing.response-time.enabled=true

routing.dynamic.enabled=false
routing.dynamic.discovery.cache.initial-capacity=5
routing.dynamic.discovery.cache.max-size=200
routing.forward-to-gateway.enabled=${SIDECAR_FORWARD_UNKNOWN_REQUESTS:false}
routing.forward-to-gateway.destination=${SIDECAR_FORWARD_UNKNOWN_REQUESTS_DESTINATION:http://api-gateway:8000}

filters.tracing.on-error=false

# ###################################
# Health check configurations
# ###################################
health-check.filter.no-checks.enabled=true
# following filters can be enabled if needed, but they make sense only if the corresponding health checks are enabled
# and 'no-checks' filter is disabled
#health-check.filter.kafka-simplified.enabled=false
#health-check.filter.module-simplified.enabled=false

# to log complete health check when status is down,
# the log message won't be affected by filters since they are applied afterward
quarkus.log.category."io.smallrye.health.HealthLogging.healthDownStatus".level=INFO
